# TODO: Fix the bug that both this file and this example code throws.# # Import the PiCamera class from the picamera module# from picamera import PiCamera# from picamera.array import PiRGBArray## # Create an instance of the PiCamera class# cam = PiCamera()## # Set the resolution of the camera to 4056Ã—3040 pixels# cam.resolution = (4056, 3040)## # Capture three images using a loop# for i in range(1):#     # Capture an image and save it#     # with a file name like#     # "image0.png", "image1.png", etc.#     with PiRGBArray(cam, size=(4056, 3040)) as photo:#         # camera.capture(photo, "rgb")#         cam.capture(photo, format="bgr", use_video_port=True)#         print(photo.array)# Get speed of ISS using ORB (oriented FAST# and rotated brief) Computer Vision algorithms"""TODO: Write Description; check rulesSources that we have taken inspiration from include:- https://projects.raspberrypi.org/en/projects/astropi-iss-speed/""""""Imports and instantiation"""import timeimport cv2import math# Import the picamera classfrom picamera import PiCamera# Instantiate it and set its resolutionpiCam = PiCamera()piCam.resolution = (4056, 3040)# Allows image capture to numpy arraysfrom picamera.array import PiRGBArray"""Our classes"""class TimedPhoto:    def __init__(self, camera: PiCamera):        """Take a new photo and save an array representation of it in memory with its timestamp."""        with PiRGBArray(camera) as photo:            camera.capture(photo, format="rgb")            self.array = photo.array        self.time_ns = time.time_ns()    def __repr__(self):        """Display this timed photo as text for use in the console"""        return f"Photo(shape = ({self.array.size[0]}, {self.array.size[1]}, {self.array.size[2]}), time = {self.time_ns})""""Our functions""""""Main entrypoint"""print(TimedPhoto(piCam))# time.sleep(1)# print(TimedPhoto(piCam))